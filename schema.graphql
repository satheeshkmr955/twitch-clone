type Query {
  greeting: String
  getRecommended(input: GetRecommendedInput): Users!
  isFollowingUser(input: IsFollowingUserInput!): IsUserFollowing!
  isBlockedByUser(input: IsBlockedByUserInput!): IsUserBlocked!
  getUserByName(input: GetUserByNameInput!): User
  getSelfByName(input: GetSelfByNameInput!): User
  getUserByNameWithAllDetails(
    input: GetUserByNameWithAllDetailsInput!
  ): UserWithAllDetails!
  getFollowedUsers: FollowedUsers!
  getStreamByUserId(input: GetStreamByUserIdInput!): Stream
}

type Mutation {
  followUser(input: FollowUserInput!): FollowUser!
  unFollowUser(input: FollowUserInput!): FollowUser!
  blockUser(input: BlockUserInput!): BlockedUser!
  unBlockUser(input: UnBlockUserInput!): BlockedUser!
  updateStream(input: UpdateStreamInput!): UpdatedStream!
  createIngress(input: CreateIngressInput!): UpdatedStream!
  resetIngress(input: ResetIngressInput): UpdatedStream!
}

type IsUserBlocked {
  isBlocked: Boolean!
}

type IsUserFollowing {
  isFollowing: Boolean!
}

type FollowedUsers {
  items: [Follow!]!
}

type Users {
  items: [User!]!
  pagination: Pagination!
}

type Block {
  id: ID!
  blockerId: String!
  blockedId: String!
  blocker: User!
  blocked: User!
}

type Stream {
  id: ID!
  name: String!
  thumbnailUrl: String

  ingressId: String
  serverUrl: String
  streamKey: String

  isLive: Boolean!
  isChatEnabled: Boolean!
  isChatDelayed: Boolean!
  isChatFollowersOnly: Boolean!

  userId: String!
  user: User!
}

type BlockedUser {
  block: Block!
  toast: Toast!
}

type UpdatedStream {
  stream: Stream!
  toast: Toast!
}

type UserWithAllDetails {
  user: User
  isFollowing: Boolean!
  isBlocked: Boolean!
}

type FollowUser {
  follow: Follow!
  toast: Toast!
}

enum ToastTypes {
  success
  info
  warning
  error
}

type Toast {
  text: String!
  type: ToastTypes!
}

type Follow {
  id: ID!
  followerId: String!
  followingId: String!
  follower: User!
  following: User!
}

type Pagination {
  totalRecords: Int!
  currentLimit: Int!
  currentPage: Int!
  hasNextPage: Boolean!
}

type User {
  id: ID!
  name: String!
  slugName: String!
  email: String!
  image: String
}

input IsFollowingUserInput {
  id: ID!
}

input IsBlockedByUserInput {
  id: ID!
}

input GetUserByNameWithAllDetailsInput {
  name: String!
}

input CreateIngressInput {
  ingressType: Int!
}

input ResetIngressInput {
  hostIdentity: String!
}

input GetUserByNameInput {
  name: String!
}

input UnBlockUserInput {
  id: ID!
}

input GetStreamByUserIdInput {
  userId: ID!
}

input BlockUserInput {
  id: ID!
}

input UpdateStreamInput {
  name: String
  isChatEnabled: Boolean
  isChatDelayed: Boolean
  isChatFollowersOnly: Boolean
}

input GetSelfByNameInput {
  name: String!
}

input GetRecommendedInput {
  limit: Int
  page: Int
}

input FollowUserInput {
  id: ID!
}
