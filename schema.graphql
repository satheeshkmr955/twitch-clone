type Query {
  greeting: String
  getRecommended(input: GetRecommendedInput): Users!
  isFollowingUser(input: IsFollowingUserInput!): IsUserFollowing!
  isBlockedByUser(input: IsBlockedByUserInput!): IsUserBlocked!
  getUserByName(input: GetUserByNameInput!): User
  getSelfByName(input: GetSelfByNameInput!): User
  getUserByNameWithAllDetails(
    input: GetUserByNameWithAllDetailsInput!
  ): UserWithAllDetails!
  getFollowedUsers: FollowedUsers!
}

type Mutation {
  followUser(input: FollowUserInput!): FollowUser!
  unFollowUser(input: FollowUserInput!): FollowUser!
  blockUser(input: BlockUserInput!): BlockedUser!
  unBlockUser(input: UnBlockUserInput): BlockedUser!
}

type IsUserBlocked {
  isBlocked: Boolean!
}

type IsUserFollowing {
  isFollowing: Boolean!
}

type FollowedUsers {
  items: [Follow!]!
}

type Users {
  items: [User!]!
  pagination: Pagination!
}

type Block {
  id: ID!
  blockerId: String!
  blockedId: String!
  blocker: User!
  blocked: User!
}

type BlockedUser {
  block: Block!
  toast: Toast!
}

type UserWithAllDetails {
  user: User
  isFollowing: Boolean!
  isBlocked: Boolean!
}

type FollowUser {
  follow: Follow!
  toast: Toast!
}

enum ToastTypes {
  success
  info
  warning
  error
}

type Toast {
  text: String!
  type: ToastTypes!
}

type Follow {
  id: ID!
  followerId: String!
  followingId: String!
  follower: User!
  following: User!
}

type Pagination {
  totalRecords: Int!
  currentLimit: Int!
  currentPage: Int!
  hasNextPage: Boolean!
}

type User {
  id: ID!
  name: String!
  slugName: String!
  email: String!
  image: String
}

input IsFollowingUserInput {
  id: ID!
}

input IsBlockedByUserInput {
  id: ID!
}

input GetUserByNameWithAllDetailsInput {
  name: String!
}

input GetUserByNameInput {
  name: String!
}

input UnBlockUserInput {
  id: ID!
}

input BlockUserInput {
  id: ID!
}

input GetSelfByNameInput {
  name: String!
}

input GetRecommendedInput {
  limit: Int
  page: Int
}

input FollowUserInput {
  id: ID!
}
