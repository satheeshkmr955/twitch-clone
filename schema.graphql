type Query {
  greeting: String
  getRecommended(input: GetRecommendedInput): Users!
  isFollowingUser(input: IsFollowingUserInput!): Boolean!
  getUserByName(input: GetUserByNameInput!): User
}

type Mutation {
  followUser(input: FollowUserInput!): Follow!
}

type Users {
  items: [User!]!
  pagination: Pagination!
}

type Follow {
  id: ID!
  followerId: String!
  followingId: String!
  follower: User!
  following: User!
}

type Pagination {
  totalRecords: Int!
  currentLimit: Int!
  currentPage: Int!
  hasNextPage: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  image: String
}

input IsFollowingUserInput {
  id: ID!
}

input GetUserByNameInput {
  name: String!
}

input GetRecommendedInput {
  limit: Int
  page: Int
}

input FollowUserInput {
  id: ID!
}
